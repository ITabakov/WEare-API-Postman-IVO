{
	"info": {
		"_postman_id": "73ca175e-13d3-4659-9aa0-2984a11fa5d0",
		"name": "API testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "28750816-73ca175e-13d3-4659-9aa0-2984a11fa5d0"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "CRUD",
					"item": [
						{
							"name": "Register users",
							"item": [
								{
									"name": "Register user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbbaaf4b-5ead-4b09-9a27-3a67ac48dbf1",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"",
													"const nameMatch = responseBody.match(/name (\\w+)/);",
													"const idMatch = responseBody.match(/id (\\d+)/);",
													"",
													"// Check if the matches were found and set them as collection variables",
													"if (nameMatch && idMatch) {",
													"    const name = nameMatch[1];",
													"    const id = idMatch[1];",
													"    ",
													"    pm.collectionVariables.set(\"username\", name);",
													"    pm.collectionVariables.set(\"userID\", id);",
													"}",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    console.log(response.json());",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.property('code', 200);});",
													"",
													"        var responseData = response.json();",
													"        var expectedUsername = pm.collectionVariables.get(\"username\");",
													"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
													"",
													"        // Check if the expected username matches the response username",
													"        pm.test(\"Usernames should match\", function () {",
													"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
													"        });",
													"",
													"        // Check if the expected username matches the response id",
													"        pm.test(\"IDs should match\", function () {",
													"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
													"});",
													"        ",
													"        pm.test(\"User role is USER\", function () {",
													"        pm.expect(responseData.authorities).to.include('ROLE_USER', \"Expected user role to be 'ROLE_USER', but found '\" + responseData.authorities + \"'\");",
													"    ",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "12d4be79-0b5c-4a28-83a5-179b8b36d9f7",
												"exec": [
													"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
													"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
													"",
													"const min = 100;",
													"const max = 157;",
													"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
													"",
													"// Set the random number as an environment variable",
													"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "005da486-72cd-461b-a955-9b35899482fa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Register user without expertise category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e6958ac-123f-4443-b2bd-ad8221f60893",
												"exec": [
													"pm.test(\"Status code is not 200\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1e0ff904-6b52-47ed-82fe-4aa4009650f8",
												"exec": [
													"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
													"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
													"",
													"const min = 100;",
													"const max = 157;",
													"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
													"",
													"// Set the random number as an environment variable",
													"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bbc9bd61-6f77-4975-8a87-15075c1c2658",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Register admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0121dfd-401e-4a77-bca2-53028aff01bc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"",
													"const nameMatch = responseBody.match(/name (\\w+)/);",
													"const idMatch = responseBody.match(/id (\\d+)/);",
													"",
													"// Check if the matches were found and set them as collection variables",
													"if (nameMatch && idMatch) {",
													"    const name = nameMatch[1];",
													"    const id = idMatch[1];",
													"    ",
													"    pm.collectionVariables.set(\"username\", name);",
													"    pm.collectionVariables.set(\"userID\", id);",
													"}",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    console.log(response.json());",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.property('code', 200);});",
													"",
													"        var responseData = response.json();",
													"        var expectedUsername = pm.collectionVariables.get(\"username\");",
													"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
													"",
													"        // Check if the expected username matches the response username",
													"        pm.test(\"Usernames should match\", function () {",
													"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
													"        });",
													"",
													"        // Check if the expected username matches the response id",
													"        pm.test(\"IDs should match\", function () {",
													"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
													"});",
													"        ",
													"        pm.test(\"User role is ADMIN\", function () {",
													"        pm.expect(responseData.authorities).to.include('ROLE_ADMIN', \"Expected user role to be 'ROLE_ADMIN', but found '\" + responseData.authorities + \"'\");",
													"    ",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "05bd44ab-2b08-48da-9ce7-b9cb57ea6698",
												"exec": [
													"var randomFirstName = pm.collectionVariables.replaceIn('{{$randomFirstName}}');",
													"randomFirstName = \"admin\" + randomFirstName;",
													"pm.collectionVariables.set(\"username\", randomFirstName);",
													"",
													"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
													"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
													"",
													"const min = 100;",
													"const max = 157;",
													"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
													"",
													"// Set the random number as an environment variable",
													"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b1463e33-248a-4ee5-848a-8f11e4f92f1e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{  \"authorities\": [\n    \"ROLE_ADMIN\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Authenticate user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8c9010a-037e-4262-a2dc-809991c78cf3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a9b7ac9d-d421-459a-a5a9-dd728874e160",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseurl}}/authenticate",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"authenticate"
											]
										}
									},
									"response": []
								}
							],
							"id": "511a3199-88ac-4efb-8722-67134c4f7bd1"
						},
						{
							"name": "Get user by ID, name or expertise",
							"item": [
								{
									"name": "Register user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f051ae21-cad4-4bd2-be13-ca7067de1114",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"",
													"const nameMatch = responseBody.match(/name (\\w+)/);",
													"const idMatch = responseBody.match(/id (\\d+)/);",
													"",
													"// Check if the matches were found and set them as collection variables",
													"if (nameMatch && idMatch) {",
													"    const name = nameMatch[1];",
													"    const id = idMatch[1];",
													"    ",
													"    pm.collectionVariables.set(\"username\", name);",
													"    pm.collectionVariables.set(\"userID\", id);",
													"}",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    console.log(response.json());",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.property('code', 200);});",
													"",
													"        var responseData = response.json();",
													"        var expectedUsername = pm.collectionVariables.get(\"username\");",
													"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
													"",
													"        // Check if the expected username matches the response username",
													"        pm.test(\"Usernames should match\", function () {",
													"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
													"        });",
													"",
													"        // Check if the expected username matches the response id",
													"        pm.test(\"IDs should match\", function () {",
													"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
													"});",
													"        ",
													"        pm.test(\"User role is USER\", function () {",
													"        pm.expect(responseData.authorities).to.include('ROLE_USER', \"Expected user role to be 'ROLE_USER', but found '\" + responseData.authorities + \"'\");",
													"    ",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "269dc394-88d1-4bdc-a10f-d9d64f0347a2",
												"exec": [
													"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
													"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
													"",
													"const min = 100;",
													"const max = 157;",
													"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
													"",
													"// Set the random number as an environment variable",
													"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "27745e48-1a24-4eb7-8224-acb2137d8f19",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Get user by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f636438-841c-41c4-8e43-3760f73561de",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"// Get the expected username and id value from the environment",
													"var expectedUsername = pm.collectionVariables.get(\"username\");",
													"var expectedUserID = pm.collectionVariables.get(\"userID\");",
													"",
													"var responseUsername = pm.response.json().username;",
													"var responseUserID = pm.response.json().id;",
													"",
													"// Check if the expected username matches the response username",
													"pm.test(\"Usernames should match\", function () {",
													"    pm.expect(responseUsername).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseUsername);",
													"});",
													"",
													"// Check if the expected username matches the response username",
													"pm.test(\"IDs should match\", function () {",
													"    pm.expect(responseUserID.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseUserID);",
													"});",
													"",
													"var expertise = pm.response.json().expertise;",
													"pm.collectionVariables.set(\"userExpertise\", expertise);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "88ce0532-6427-47ff-a836-cff39a06a1d9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseurl}}/api/users/auth/{{userID}}?principal={{username}}",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"{{userID}}"
											],
											"query": [
												{
													"key": "principal",
													"value": "{{username}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get users by expertise",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be837163-ced2-4960-ac20-65699ebc8bff",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"// Get the \"category\" name from the response",
													"var categoryName = pm.response.json()[0].expertiseProfile.category.name;",
													"",
													"// Get the \"userExpertise\" collection variable",
													"var userExpertise = pm.collectionVariables.get(\"userExpertise\");",
													"",
													"// Check if the \"category\" name matches the \"userExpertise\" variable",
													"pm.test(\"Category name should match expertise\", function () {",
													"    pm.expect(categoryName).to.equal(userExpertise,  \"Category name and expertise mismatch. Expected: \" + userExpertise + \", Actual: \" + categoryName);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ef572059-31cd-4248-803f-342320428986",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"index\": 0,\n  \"next\": true,\n  \"searchParam1\": \"{{userExpertise}}\",\n  \"searchParam2\": \"\",\n  \"size\": 5\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get users by first name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc6ed520-342d-4429-a723-06dd9fe23e3e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    console.log(response.json());",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.property('code', 200);});",
													"        ",
													"pm.test(\"User's first name is correct\", function () {",
													"    var expectedFirstName = pm.collectionVariables.get(\"user_firstName\"); ",
													"    var responseData = response.json();",
													"    pm.expect(responseData.firstName).to.eql(expectedFirstName, \"Expected first name to be '\" + expectedFirstName + \"', but found '\" + responseData.firstName + \"'\");",
													"});",
													"",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e759ef2d-5234-4d91-ac30-1405a70fc952",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5dffd3f9-51cf-47ed-b406-3762d5ace97d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"index\": 0,\n  \"next\": true,\n  \"searchParam1\": \"\",\n  \"searchParam2\": \"{{user_firstName}}\",\n  \"size\": 10\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get users by full name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b1c6d422-9faa-4bab-b923-580a29fe5363",
												"exec": [
													"var fullName = pm.collectionVariables.get(\"user_firstName\") + \" \" + pm.collectionVariables.get(\"user_lastName\");",
													"",
													"pm.collectionVariables.set(\"user_fullName\", fullName);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fca39dda-3539-45d6-a00b-4a9360fafa40",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    console.log(response.json());",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.property('code', 200);});",
													"        ",
													"pm.test(\"User's first name is correct\", function () {",
													"    var expectedFirstName = pm.collectionVariables.get(\"user_firstName\"); ",
													"    var responseData = response.json();",
													"    pm.expect(responseData.firstName).to.eql(expectedFirstName, \"Expected first name to be '\" + expectedFirstName + \"', but found '\" + responseData.firstName + \"'\");",
													"});",
													"pm.test(\"User's last name is correct\", function () {",
													"    var expectedLastName = pm.collectionVariables.get(\"user_lastName\"); ",
													"    var responseData = response.json();",
													"    pm.expect(responseData.lastName).to.eql(expectedLastName, \"Expected last name to be '\" + expectedLastName + \"', but found '\" + responseData.lastName + \"'\");",
													"});",
													"",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2a198ad7-03aa-4e15-ad45-d2a1d1647120",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"index\": 0,\n  \"next\": true,\n  \"searchParam1\": \"\",\n  \"searchParam2\": \"{{user_fullName}}\",\n  \"size\": 1\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"id": "9d655939-e2d7-4545-98e3-5f524700397e"
						},
						{
							"name": "Update user's profile information",
							"item": [
								{
									"name": "Register user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec1948c7-3c14-429d-bc32-51b647b97e5e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"",
													"const nameMatch = responseBody.match(/name (\\w+)/);",
													"const idMatch = responseBody.match(/id (\\d+)/);",
													"",
													"// Check if the matches were found and set them as collection variables",
													"if (nameMatch && idMatch) {",
													"    const name = nameMatch[1];",
													"    const id = idMatch[1];",
													"    ",
													"    pm.collectionVariables.set(\"username\", name);",
													"    pm.collectionVariables.set(\"userID\", id);",
													"}",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    console.log(response.json());",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.property('code', 200);});",
													"",
													"        var responseData = response.json();",
													"        var expectedUsername = pm.collectionVariables.get(\"username\");",
													"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
													"",
													"        // Check if the expected username matches the response username",
													"        pm.test(\"Usernames should match\", function () {",
													"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
													"        });",
													"",
													"        // Check if the expected username matches the response id",
													"        pm.test(\"IDs should match\", function () {",
													"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
													"});",
													"        ",
													"        pm.test(\"User role is USER\", function () {",
													"        pm.expect(responseData.authorities).to.include('ROLE_USER', \"Expected user role to be 'ROLE_USER', but found '\" + responseData.authorities + \"'\");",
													"    ",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "363369c0-928d-4fce-b1cd-f606cfc0a8c9",
												"exec": [
													"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
													"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
													"",
													"const min = 100;",
													"const max = 157;",
													"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
													"",
													"// Set the random number as an environment variable",
													"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0ff1f369-869f-46ce-ab23-cc47fe5bd7ba",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user's personal profile",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "647a14e5-4698-4f61-8836-5e4469b61bcd",
												"exec": [
													"// To edit your own profile user must be authenticated",
													"// Define the form data",
													"const formData = {",
													"    username: pm.collectionVariables.get(\"username\"),",
													"",
													"    password: pm.collectionVariables.get(\"password\")",
													"};",
													"    console.log(formData);",
													"",
													"// Define the POST request configuration",
													"const postRequestConfig = {",
													"    method: 'POST',",
													"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,",
													"    header: 'Content-Type: application/x-www-form-urlencoded',",
													"    body: {",
													"        mode: 'formdata',",
													"        formdata: [",
													"            { key: 'username', value: formData.username },",
													"            { key: 'password', value: formData.password }",
													"        ]",
													"    }",
													"};",
													"",
													"// Send the POST request",
													"pm.sendRequest(postRequestConfig, function (err, response) {",
													"    console.log(response);",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"POST request failed\");",
													"        });",
													"    } ",
													"});",
													"",
													"",
													"",
													"// Generate a random birth date within a desired range",
													"function getRandomDate(minYear, maxYear) {",
													"    const year = Math.floor(Math.random() * (maxYear - minYear + 1)) + minYear;",
													"    const month = Math.floor(Math.random() * 12) + 1; // Months are 1-12",
													"    const day = Math.floor(Math.random() * 31) + 1; // Days are 1-31",
													"",
													"    // Ensure the day and month are formatted with leading zeros if needed",
													"    const formattedMonth = month.toString().padStart(2, '0');",
													"    const formattedDay = day.toString().padStart(2, '0');",
													"",
													"    return `${year}-${formattedMonth}-${formattedDay}`;",
													"}",
													"",
													"// Define the desired birth date range (adjust as needed)",
													"const minBirthYear = 1930;",
													"const maxBirthYear = 2008;",
													"",
													"// Generate a random birth date within the specified range",
													"const randomBirthDate = getRandomDate(minBirthYear, maxBirthYear);",
													"",
													"// Set the random birth date as a collection variable",
													"pm.collectionVariables.set(\"user_birthDate\", randomBirthDate);",
													"",
													"",
													"",
													"// Set random first and last name",
													"pm.collectionVariables.set(\"user_firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.collectionVariables.set(\"user_lastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
													"",
													"// Set random city",
													"// Parse the CSV content from the environment variable",
													"const cityCSV = pm.collectionVariables.get(\"cityData\").split('\\n');",
													"const randomIndex = Math.floor(Math.random() * cityCSV.length);",
													"",
													"// Select a random city and its ID",
													"const [cityId, cityName] = cityCSV[randomIndex].split(',');",
													"",
													"",
													"// Set the \"city\" and \"id\" variables in the request environment",
													"pm.collectionVariables.set(\"city_name\", cityName.trim());",
													"pm.collectionVariables.set(\"city_id\", parseInt(cityId));",
													"",
													"",
													"// Set either MALE or FEMALE as sex",
													"const sexes = [\"MALE\", \"FEMALE\"];",
													"",
													"// Generate a random index to select a value",
													"const index = Math.floor(Math.random() * sexes.length);",
													"",
													"// Get the random sex value",
													"const randomSex = sexes[index];",
													"",
													"// Set the random sex as a collection variable",
													"pm.collectionVariables.set(\"user_sex\", randomSex);",
													"",
													"// Set picture privacy",
													"// Generate a random boolean value (true or false)",
													"const randomBoolean = Math.random() < 0.5;",
													"",
													"// Set the random boolean value as a collection variable",
													"pm.collectionVariables.set(\"user_picturePrivacy\", randomBoolean);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "47d84c93-82c6-43a0-ad3f-273339a75a80",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, 'Expected 200');",
													"});",
													"",
													"pm.test(\"Check birthYear in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.birthYear).to.equal(pm.collectionVariables.get(\"user_birthDate\"));",
													"});",
													"",
													"pm.test(\"Check firstName in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.firstName).to.equal(pm.collectionVariables.get(\"user_firstName\"));",
													"});",
													"",
													"pm.test(\"Check lastName in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.lastName).to.equal(pm.collectionVariables.get(\"user_lastName\"));",
													"});",
													"",
													"pm.test(\"Check picturePrivacy in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    const expectedPicturePrivacy = pm.collectionVariables.get(\"user_picturePrivacy\"); ",
													"",
													"    pm.expect(responseJson.picturePrivacy).to.equal(expectedPicturePrivacy);",
													"});",
													"",
													"pm.test(\"Check sex in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.sex).to.equal(pm.collectionVariables.get(\"user_sex\"));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ee74aa16-f3c8-4992-bc71-ceb9513695a8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"birthYear\": \"{{user_birthDate}}\",\n  \"firstName\": \"{{user_firstName}}\",\n  \"lastName\": \"{{user_lastName}}\",\n  \"location\": {\n    \"city\": {\n      \"city\": \"{{city_name}}\",\n      \"country\": {},\n      \"id\": {{city_id}}\n    }\n    ,\n    \"id\": 1\n  },\n  \"memberSince\": \"\",\n  \"personalReview\": \"\",\n  \"picture\": \"\",\n  \"picturePrivacy\": {{user_picturePrivacy}},\n  \"sex\": \"{{user_sex}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/auth/{{userID}}/personal",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"{{userID}}",
												"personal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user's expertise profile",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fc00f126-a3c6-4c6f-9ccf-0c526a8233ba",
												"exec": [
													"// // To edit your own profile user must be authenticated",
													"// // Define the form data",
													"// const formData = {",
													"//     username: pm.collectionVariables.get(\"username\"),",
													"",
													"//     password: pm.collectionVariables.get(\"password\")",
													"// };",
													"//     console.log(formData);",
													"",
													"// // Define the POST request configuration",
													"// const postRequestConfig = {",
													"//     method: 'POST',",
													"//     url: `${pm.collectionVariables.get('baseurl')}/authenticate`,",
													"//     header: 'Content-Type: application/x-www-form-urlencoded',",
													"//     body: {",
													"//         mode: 'formdata',",
													"//         formdata: [",
													"//             { key: 'username', value: formData.username },",
													"//             { key: 'password', value: formData.password }",
													"//         ]",
													"//     }",
													"// };",
													"",
													"// // Send the POST request",
													"// pm.sendRequest(postRequestConfig, function (err, response) {",
													"//     console.log(response);",
													"//     if (err) {",
													"//         console.error(err);",
													"//         pm.test(\"Request failed\", function () {",
													"//             pm.expect.fail(\"POST request failed\");",
													"//         });",
													"//     } ",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "722ae496-418c-4f4b-87ed-9072c89c06ce",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "92430974-8816-4626-bc9c-5a2ea66d08d2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"availability\": 3,\n  \"category\": {\n    \"id\": 103, \n    \"name\": \"Author\"\n  },\n  \"id\": 0,\n  \"skill1\": \"cook\",\n  \"skill2\": \"clean\",\n  \"skill3\": \"vacuum\",\n  \"skill4\": \"dust\",\n  \"skill5\": \"wash\",\n  \"skills\":[\"more\", \"and more\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/auth/{{userID}}/expertise",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"{{userID}}",
												"expertise"
											]
										}
									},
									"response": []
								}
							],
							"id": "c412fa76-38ca-4916-9fa1-326c7150ba61"
						}
					],
					"id": "0c0ff591-7f1c-4ef7-af56-ab511657aa22"
				},
				{
					"name": "Connection requests",
					"item": [
						{
							"name": "Register user A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4069b482-0967-47ff-8ca8-2abc95ab6e66",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"",
											"const nameMatch = responseBody.match(/name (\\w+)/);",
											"const idMatch = responseBody.match(/id (\\d+)/);",
											"",
											"// Check if the matches were found and set them as collection variables",
											"if (nameMatch && idMatch) {",
											"    const name = nameMatch[1];",
											"    const id = idMatch[1];",
											"    ",
											"    pm.collectionVariables.set(\"senderUsername\", name);",
											"    pm.collectionVariables.set(\"userID\", id);",
											"}",
											"",
											"// Define the request configuration",
											"const getRequestConfig = {",
											"    method: 'GET',",
											"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
											"};",
											"",
											"// Send the GET request",
											"pm.sendRequest(getRequestConfig,  (err, response) => {",
											"    console.log(response.json());",
											"    if (err) {",
											"        console.error(err);",
											"        pm.test(\"Request failed\", function () {",
											"            pm.expect.fail(\"GET request failed\");",
											"        });",
											"    } else {",
											"        // Validate the response",
											"        pm.test('response should be okay to process', () => {",
											"        pm.expect(response).to.have.property('code', 200);});",
											"",
											"        var responseData = response.json();",
											"        var expectedUsername = pm.collectionVariables.get(\"username\");",
											"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
											"",
											"        // Check if the expected username matches the response username",
											"        pm.test(\"Usernames should match\", function () {",
											"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
											"        });",
											"",
											"        // Check if the expected username matches the response id",
											"        pm.test(\"IDs should match\", function () {",
											"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
											"});",
											"        ",
											"        pm.test(\"User role is USER\", function () {",
											"        pm.expect(responseData.authorities).to.include('ROLE_USER', \"Expected user role to be 'ROLE_USER', but found '\" + responseData.authorities + \"'\");",
											"    ",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f4430b10-8041-4392-bd4f-911260c97057",
										"exec": [
											"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
											"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
											"",
											"const min = 100;",
											"const max = 157;",
											"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
											"",
											"// Set the random number as an environment variable",
											"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "aed82c9e-0a38-4f51-b6a8-1c375b621e22",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/users/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate user A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a355f5e-54d0-42eb-bd02-c3a95ebbf0c1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "131fd708-d66e-4725-9913-82c77b5673d0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseurl}}/authenticate",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register user B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5ea0952-b77f-4a84-b301-976f66e68e05",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"",
											"const nameMatch = responseBody.match(/name (\\w+)/);",
											"const idMatch = responseBody.match(/id (\\d+)/);",
											"",
											"// Check if the matches were found and set them as collection variables",
											"if (nameMatch && idMatch) {",
											"    const name = nameMatch[1];",
											"    const id = idMatch[1];",
											"    ",
											"    pm.collectionVariables.set(\"recipientUsername\", name);",
											"    pm.collectionVariables.set(\"userID\", id);",
											"}",
											"",
											"// Define the request configuration",
											"const getRequestConfig = {",
											"    method: 'GET',",
											"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
											"};",
											"",
											"// Send the GET request",
											"pm.sendRequest(getRequestConfig,  (err, response) => {",
											"    console.log(response.json());",
											"    if (err) {",
											"        console.error(err);",
											"        pm.test(\"Request failed\", function () {",
											"            pm.expect.fail(\"GET request failed\");",
											"        });",
											"    } else {",
											"        // Validate the response",
											"        pm.test('response should be okay to process', () => {",
											"        pm.expect(response).to.have.property('code', 200);});",
											"",
											"        var responseData = response.json();",
											"        var expectedUsername = pm.collectionVariables.get(\"username\");",
											"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
											"",
											"        // Check if the expected username matches the response username",
											"        pm.test(\"Usernames should match\", function () {",
											"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
											"        });",
											"",
											"        // Check if the expected username matches the response id",
											"        pm.test(\"IDs should match\", function () {",
											"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
											"});",
											"        ",
											"        pm.test(\"User role is USER\", function () {",
											"        pm.expect(responseData.authorities).to.include('ROLE_USER', \"Expected user role to be 'ROLE_USER', but found '\" + responseData.authorities + \"'\");",
											"    ",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e966d1ec-b767-4fe0-8a66-278d75fc2e97",
										"exec": [
											"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
											"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
											"",
											"const min = 100;",
											"const max = 157;",
											"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
											"",
											"// Set the random number as an environment variable",
											"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1bb53394-c916-4b9c-a730-3f5b7297e265",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/users/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "User A sends connection request to user B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca15a42f-9b12-4a46-935e-b9a6023b2420",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"pm.test(\"Response includes two usernames\", function () {",
											"    // Define the expected usernames",
											"    const expectedSender = pm.collectionVariables.get('senderUsername');",
											"    const expectedRecipient = pm.collectionVariables.get('recipientUsername');",
											"",
											"    // Extract the response text",
											"    const responseText = pm.response.text();",
											"",
											"    // Check if both usernames are present in the response",
											"    pm.expect(responseText).to.include(expectedSender);",
											"    pm.expect(responseText).to.include(expectedRecipient);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "aaeb0a58-56ee-44f5-b39e-8dc709302fad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": {{userID}},\n  \"username\": \"{{username}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/auth/request",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"auth",
										"request"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate user B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fc66636-970b-42cc-bae7-4a25c2b485dd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "72bee17f-1da2-4727-a162-cedaa6b651a3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseurl}}/authenticate",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get connection request by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15a3bfb1-b1df-45c2-b2aa-2a735be4cba8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"pm.test(\"Approved status is false\", function () {",
											"    // Extract the response data as JSON",
											"    const responseData = pm.response.json();",
											"    const firstObject = responseData[0];",
											"",
											"    // Validate the \"approved\" status",
											"    pm.expect(firstObject.approved, \"Expected 'approved' status to be false\").to.equal(false);",
											"});",
											"",
											"pm.test(\"Response has 'receiver' and 'sender'\", function () {",
											"    const responseData = pm.response.json();",
											"    const firstObject = responseData[0];",
											"",
											"    // Validate the presence of 'receiver' and 'sender' fields",
											"    pm.expect(firstObject).to.have.property(\"receiver\", \"Response should have 'receiver' field\");",
											"    pm.expect(firstObject).to.have.property(\"sender\", \"Response should have 'sender' field\");",
											"});",
											"",
											"",
											"const responseData = pm.response.json();",
											"const requestId = parseInt(responseData[0].id, 10);",
											"",
											"// Set the ID as a collection variable",
											"pm.collectionVariables.set(\"requestId\", requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a5dc7f4e-51bc-4158-b1b9-65245e931b23",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/auth/users/{{userID}}/request/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userID}}",
										"request",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve connection request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "488d8297-5d35-436d-8376-454e5676a917",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"pm.test(\"Response includes two usernames\", function () {",
											"    // Define the expected usernames",
											"    const expectedSender = pm.collectionVariables.get('senderUsername');",
											"    const expectedRecipient = pm.collectionVariables.get('recipientUsername');;",
											"",
											"    // Extract the response text",
											"    const responseText = pm.response.text();",
											"",
											"    // Check if both usernames are present in the response",
											"    pm.expect(responseText).to.include(expectedSender);",
											"    pm.expect(responseText).to.include(expectedRecipient);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "541c6ba7-3d43-4738-a1eb-80eb4d1695d9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/auth/users/{{userID}}/request/approve?requestId={{requestId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userID}}",
										"request",
										"approve"
									],
									"query": [
										{
											"key": "requestId",
											"value": "{{requestId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get connection request by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5025a169-bae6-4d6b-a4da-6cc09f18250b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"pm.test(\"Response is an empty array\", function () {",
											"    // Extract the response data as JSON",
											"    const responseData = pm.response.json();",
											"",
											"    // Check if the response data is an array and is empty",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.be.empty;",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c6335659-2c91-4b3b-bc26-7890d19c1db7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/auth/users/{{userID}}/request/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userID}}",
										"request",
										""
									]
								}
							},
							"response": []
						}
					],
					"id": "10926ee5-3650-4c11-97b9-c63001a3bcce"
				}
			],
			"id": "885bf146-9f78-41ac-8fb1-de2951ce9be6"
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "CRUD",
					"item": [
						{
							"name": "Authenticate user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.collectionVariables.set(\"authUser\", pm.request)"
										],
										"type": "text/javascript",
										"id": "46474370-9660-4897-b53b-8940774c7391"
									}
								}
							],
							"id": "0454dfc0-958f-47c3-ac4b-a18998c7c81c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "{{usertest1}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password1}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseurl}}/authenticate",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"console.log(jsonData);\r",
											"\r",
											"// Access the response JSON directly\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Function to extract the date as a JavaScript Date object for comparison\r",
											"function extractDate(post) {\r",
											"    return new Date(post.date);\r",
											"}\r",
											"\r",
											"// Find the post with the newest date\r",
											"var newestPost = responseJson.reduce(function (maxPost, post) {\r",
											"    return extractDate(post) > extractDate(maxPost) ? post : maxPost;\r",
											"}, responseJson[0]);\r",
											"\r",
											"// Extract the ID of the newest post\r",
											"var newestPostId = newestPost.postId;\r",
											"\r",
											"// Log the ID of the newest post\r",
											"console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"// You can also set a Postman environment variable with the result\r",
											"pm.collectionVariables.set(\"newestPostId\", newestPostId);\r",
											"\r",
											"pm.collectionVariables.set(\"getPost\", pm.request);\r",
											""
										],
										"type": "text/javascript",
										"id": "61149595-93a8-44fb-bf0d-82cf1389b74a"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest(pm.collectionVariables.get(\"authUser\"));\r",
											""
										],
										"type": "text/javascript",
										"id": "c18fe18b-f655-4150-8369-17fbdc31e801"
									}
								}
							],
							"id": "4cca8429-dedc-42e4-a5dd-c5bedfcacd6e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/post/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"post",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Id in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.postId).to.not.null;\r",
											"});\r",
											"pm.test(\"Content in response\", function () {\r",
											"    var postcontent= pm.collectionVariables.get('hundred_symbols');\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.content).to.equal(postcontent);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"console.log(jsonData);\r",
											"\r",
											"// Access the response JSON directly\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Extract the ID of the newest post\r",
											"var newestPostId = responseJson.postId;\r",
											"\r",
											"// Log the ID of the newest post\r",
											"console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"// You can also set a Postman environment variable with the result\r",
											"pm.collectionVariables.set(\"newestPostId\", newestPostId);\r",
											"\r",
											"\r",
											"pm.collectionVariables.set(\"postCreate\", pm.request);\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/api/post/auth/manager?postId=${newestPostId}`,\r",
											"    method: 'DELETE',\r",
											"    header:{\r",
											"        'Content-Type':'application/json',\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "31998e5e-fae8-4e3e-95ee-34eeff037470"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest(pm.collectionVariables.get(\"authUser\"));\r",
											"\r",
											"\r",
											"// create 100 symbols message\r",
											"const hundredSymbols = Array(34).fill('xo ').join('');\r",
											"pm.collectionVariables.set('hundred_symbols', hundredSymbols);\r",
											""
										],
										"type": "text/javascript",
										"id": "51f2adfc-33c5-43c8-abd4-35b1439ffb0e"
									}
								}
							],
							"id": "bf260b70-6f56-456b-b723-13d1e2d9961f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": \"{{hundred_symbols}}\",\r\n  \"picture\": \"https://content.api.news/v3/images/bin/eb46d3099a5f3b45b4b1b0f4deae1d0a\",\r\n  \"public\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/post/auth/creator",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"post",
										"auth",
										"creator"
									]
								}
							},
							"response": []
						},
						{
							"name": "Like post",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"const formData = {\r",
											"    username: pm.collectionVariables.get('usertest1'),\r",
											"    password: pm.collectionVariables.get('password1')\r",
											"};\r",
											"    console.log(formData);\r",
											"\r",
											"// Define the POST request configuration\r",
											"const postRequestConfig = {\r",
											"    method: 'POST',\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,\r",
											"    header: 'Content-Type: application/x-www-form-urlencoded',\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: formData.username },\r",
											"            { key: 'password', value: formData.password }\r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(pm.collectionVariables.get(\"postCreate\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var newestPostId = responseJson.postId;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        pm.collectionVariables.set(\"newestPostId\", newestPostId);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"id": "1ce371fa-7afb-4c56-816f-5718eeb14200"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Id in response\", function () {\r",
											"            pm.expect(jsonData.postId).to.not.null;\r",
											"        });\r",
											"pm.test(\"User expected to have liked the comment one from the test\", function() {\r",
											"    pm.expect(jsonData.likes[0].username).to.equal(pm.collectionVariables.get('usertest1'))\r",
											"});\r",
											"\r",
											"var newestPostId = pm.collectionVariables.get('newestPostId');\r",
											"pm.sendRequest({\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/api/post/auth/manager?postId=${newestPostId}`,\r",
											"    method: 'DELETE',\r",
											"    header:{\r",
											"        'Content-Type':'application/json',\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "a26a9450-7822-4148-840b-aaf837eaa299"
									}
								}
							],
							"id": "5ed8f1ff-8000-43e3-866c-df7b9f463df9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/post/auth/likesUp?postId={{newestPostId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"post",
										"auth",
										"likesUp"
									],
									"query": [
										{
											"key": "postId",
											"value": "{{newestPostId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit post",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"const formData = {\r",
											"    username: pm.collectionVariables.get('usertest1'),\r",
											"    password: pm.collectionVariables.get('password1')\r",
											"};\r",
											"    console.log(formData);\r",
											"\r",
											"// Define the POST request configuration\r",
											"const postRequestConfig = {\r",
											"    method: 'POST',\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,\r",
											"    header: 'Content-Type: application/x-www-form-urlencoded',\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: formData.username },\r",
											"            { key: 'password', value: formData.password }\r",
											"        ]\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(pm.collectionVariables.get(\"postCreate\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var newestPostId = responseJson.postId;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        pm.collectionVariables.set(\"newestPostId\", newestPostId);\r",
											"    }\r",
											"});\r",
											"\r",
											"// create 100 symbols message\r",
											"const hundredSymbols = Array(14).fill('edited ').join('');\r",
											"pm.collectionVariables.set('hundred_symbols_edited', hundredSymbols);"
										],
										"type": "text/javascript",
										"id": "d1ff55a9-3604-4e87-a24a-1b980d6f88a1"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.sendRequest(pm.collectionVariables.get(\"getPost\"), function (response) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.expect(response).to.have.status(200);\r",
											"    });\r",
											"\r",
											"    if (response && response.json && typeof response.json === 'function') {\r",
											"        var jsonData = response.json();\r",
											"        pm.test(\"Id in response\", function () {\r",
											"            pm.expect(jsonData.postId).to.not.null;\r",
											"        });\r",
											"\r",
											"        var postcontent = pm.collectionVariables.get('hundred_symbols');\r",
											"        pm.test(\"Content in response\", function () {\r",
											"            pm.expect(jsonData.content).to.equal(postcontent);\r",
											"        });\r",
											"    } else {\r",
											"        pm.test(\"Response body is empty\", function () {\r",
											"            pm.expect.fail(\"Response body is empty\");\r",
											"        });\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var newestPostId = pm.collectionVariables.get('newestPostId');\r",
											"pm.sendRequest({\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/api/post/auth/manager?postId=${newestPostId}`,\r",
											"    method: 'DELETE',\r",
											"    header:{\r",
											"        'Content-Type':'application/json',\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "ac97cc44-1ed9-4a15-bb1f-dafcdd972194"
									}
								}
							],
							"id": "dfbe7dd3-39ac-4324-9f18-df933bcc31db",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": \"{{hundred_symbols_edited}}\",\r\n  \"picture\": \"https://content.api.news/v3/images/bin/eb46d3099a5f3b45b4b1b0f4deae1d0a\",\r\n  \"public\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/post/auth/editor?name={{usertest1}}&postId={{newestPostId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"post",
										"auth",
										"editor"
									],
									"query": [
										{
											"key": "name",
											"value": "{{usertest1}}"
										},
										{
											"key": "postId",
											"value": "{{newestPostId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete post",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d86cf505-b3d3-46fe-8569-9b93f5a852d4",
										"exec": [
											"\r",
											"const formData = {\r",
											"    username: pm.collectionVariables.get('usertest1'),\r",
											"    password: pm.collectionVariables.get('password1')\r",
											"};\r",
											"    console.log(formData);\r",
											"\r",
											"// Define the POST request configuration\r",
											"const postRequestConfig = {\r",
											"    method: 'POST',\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,\r",
											"    header: 'Content-Type: application/x-www-form-urlencoded',\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: formData.username },\r",
											"            { key: 'password', value: formData.password }\r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(pm.collectionVariables.get(\"postCreate\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var newestPostId = responseJson.postId;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        pm.collectionVariables.set(\"newestPostId\", newestPostId);\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5871111a-ad92-4496-a1c2-507653e9cdae",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var deletedPostId=pm.collectionVariables.get('newestPostId');\r",
											"\r",
											"pm.sendRequest({\r",
											"       url: `${pm.collectionVariables.get('baseurl')}/api/post/}`,\r",
											"    method: 'GET',\r",
											"    header:{\r",
											"        'Content-Type':'application/json',\r",
											"    }\r",
											"}, function(err,response){\r",
											"    if (err){\r",
											"        console.error(err);\r",
											"    } else{\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);  \r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var newestPostId = jsonData.postId;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        pm.collectionVariables.set(\"newestPostId\", newestPostId);\r",
											"\r",
											"pm.test(\"Post is deleted\", function () {\r",
											"    pm.expect(jsonData.postId).to.not.equal(deletedPostId);\r",
											"});\r",
											"    }\r",
											"});\r",
											"pm.collectionVariables.set(\"deletePost\", pm.request)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "202bfcdc-b2fa-4dde-bd32-986268510898",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/post/auth/manager?postId={{newestPostId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"post",
										"auth",
										"manager"
									],
									"query": [
										{
											"key": "postId",
											"value": "{{newestPostId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "13ef1104-68d6-4d81-8060-9a8d730a480a"
				}
			],
			"id": "b5027404-2d5a-4f40-83e8-e16c70c50fee"
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "pass123*A",
				"type": "string"
			},
			{
				"key": "username",
				"value": "adminOne",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6d1b1e44-1ffe-4563-bab3-0dc899f7b57f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f7d96c56-f74e-48aa-b998-79a74da9c237",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "4eb62e01-0bfd-4f2c-89b8-e5a50d0b078f",
			"key": "password",
			"value": "123456*A"
		},
		{
			"id": "f64645d9-712e-453a-a796-7d71b0c4fc03",
			"key": "baseurl",
			"value": "http://localhost:8081"
		},
		{
			"id": "38d58158-0552-4b93-b504-8382a7576e47",
			"key": "email",
			"value": ""
		},
		{
			"id": "593efc54-f290-40ac-b4bd-f537339fff0a",
			"key": "userID",
			"value": "41"
		},
		{
			"id": "3002c3fd-6f27-4a41-ae60-974b9c3d1a94",
			"key": "randomNumber",
			"value": ""
		},
		{
			"id": "67335400-f122-4238-a621-08adbef26bc5",
			"key": "userExpertise",
			"value": "",
			"type": "string"
		},
		{
			"id": "86796dab-3db6-4cd2-8d20-94de098891fc",
			"key": "user_firstName",
			"value": ""
		},
		{
			"id": "23da08e4-16eb-4f47-9075-fa716aae3940",
			"key": "cityData",
			"value": "1,Sofia\n2,Plovdiv\n3,Varna\n4,Burgas\n5,Ruse\n6,Stara Zagora\n7,Pleven\n8,Sliven\n9,Dobrich\n10,Shumen\n11,Pernik\n12,Haskovo\n13,Vratsa\n14,Kyustendil\n15,Montana\n16,Lovech\n17,Razgrad\n18,Borino\n19,Madan\n20,Zlatograd\n21,Pazardzhik\n22,Smolyan\n23,Blagoevgrad\n24,Nedelino\n25,Rudozem\n26,Devin\n27,Veliko Tarnovo\n28,Vidin\n29,Kirkovo\n30,Krumovgrad\n31,Dzhebel\n32,Silistra\n33,Sarnitsa\n34,Shiroka Laka\n35,Yambol\n36,Dospat\n37,Kardzhali\n38,Gabrovo\n39,Targovishte\n",
			"type": "string"
		},
		{
			"id": "767fd281-5c85-4a25-bc14-775f4f532c68",
			"key": "user_lastName",
			"value": ""
		},
		{
			"id": "189d0ab0-bf6b-4bcd-a0af-bacde436083c",
			"key": "city_name",
			"value": ""
		},
		{
			"id": "26c9abb5-81cd-4372-8238-b29bd7473a82",
			"key": "city_id",
			"value": ""
		},
		{
			"id": "e3d08f23-d109-4260-a0f2-fcbab2523c86",
			"key": "user_birthDate",
			"value": ""
		},
		{
			"id": "59b5e8c0-e0ae-411e-bbfd-9225734baaed",
			"key": "user_fullName",
			"value": "",
			"type": "string"
		},
		{
			"id": "cdf161ae-4e28-4563-81bb-9d1ef806cc50",
			"key": "user_sex",
			"value": ""
		},
		{
			"id": "5f7e5794-b512-4fa1-8b9f-4046847761d7",
			"key": "user_picturePrivacy",
			"value": ""
		},
		{
			"id": "e466cb0f-e317-4cc3-90fd-b492d87a1dda",
			"key": "username",
			"value": ""
		},
		{
			"id": "10d0074f-82a1-4346-adc8-674f29bdc85f",
			"key": "requestId",
			"value": ""
		},
		{
			"id": "409da559-f05d-4919-9810-89fc73125a2d",
			"key": "senderUsername",
			"value": "",
			"type": "string"
		},
		{
			"id": "63843210-5a8f-40be-be59-c0f20ee67153",
			"key": "recipientUsername",
			"value": "",
			"type": "string"
		},
		{
			"id": "fbe8c945-f3ae-494d-baea-19bb590c5a54",
			"key": "deletePost",
			"value": ""
		},
		{
			"id": "d2d59dbf-1102-4e07-ac94-d8da7f7df296",
			"key": "newestPostId",
			"value": ""
		},
		{
			"id": "b3a63a7a-17a2-4b2e-bc04-10612b2e8c54",
			"key": "authUser",
			"value": ""
		},
		{
			"id": "0ee4013f-096c-4202-8416-cc6b843fb2e3",
			"key": "hundred_symbols",
			"value": ""
		},
		{
			"id": "fe1c961b-30a9-4f9a-a11c-f863a5d0c630",
			"key": "postCreate",
			"value": ""
		},
		{
			"id": "efd726f6-9bee-4044-b14e-4d8ef762dbd4",
			"key": "getPost",
			"value": ""
		},
		{
			"id": "129d541d-2cc9-4cb9-bab3-df9d0f2c1f9c",
			"key": "usertest1",
			"value": "testipthree",
			"type": "string"
		},
		{
			"id": "df85ff0d-aaff-4bfd-99b5-cfdeee87a4c9",
			"key": "password1",
			"value": "Testipthree*1",
			"type": "string"
		},
		{
			"id": "f06b984a-4a58-44bf-9be1-268e29189403",
			"key": "hundred_symbols_edited",
			"value": ""
		}
	]
}